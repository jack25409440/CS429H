/* 
 * CS:APP Data Lab 
 * 
 * Author: Xiaohui Chen
 * Eid:xc2388
 * 
 * bits.c - Source file with your solutions to the Lab.
 *          This is the file you will hand in to your instructor.
 *
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc
 * compiler. You can still use printf for debugging without including
 * <stdio.h>, although you might get a compiler warning. In general,
 * it's not good practice to ignore compiler warnings, but in this
 * case it's OK.  
 */

#if 0
/*
 * Instructions to Students:
 *
 * STEP 1: Read the following instructions carefully.
 */

You will provide your solution to the Data Lab by
editing the collection of functions in this source file.

INTEGER CODING RULES:
 
  Replace the "return" statement in each function with one
  or more lines of C code that implements the function. Your code 
  must conform to the following style:
 
  int Funct(arg1, arg2, ...) {
      /* brief description of how your implementation works */
      int var1 = Expr1;
      ...
      int varM = ExprM;

      varJ = ExprJ;
      ...
      varN = ExprN;
      return ExprR;
  }

  Each "Expr" is an expression using ONLY the following:
  1. Integer constants 0 through 255 (0xFF), inclusive. You are
      not allowed to use big constants such as 0xffffffff.
  2. Function arguments and local variables (no global variables).
  3. Unary integer operations ! ~
  4. Binary integer operations & ^ | + << >>
    
  Some of the problems restrict the set of allowed operators even further.
  Each "Expr" may consist of multiple operators. You are not restricted to
  one operator per line.

  You are expressly forbidden to:
  1. Use any control constructs such as if, do, while, for, switch, etc.
  2. Define or use any macros.
  3. Define any additional functions in this file.
  4. Call any functions.
  5. Use any other operations, such as &&, ||, -, or ?:
  6. Use any form of casting.
  7. Use any data type other than int.  This implies that you
     cannot use arrays, structs, or unions.

 
  You may assume that your machine:
  1. Uses 2s complement, 32-bit representations of integers.
  2. Performs right shifts arithmetically.
  3. Has unpredictable behavior when shifting an integer by more
     than the word size.

EXAMPLES OF ACCEPTABLE CODING STYLE:
  /*
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31
   */
  int pow2plus1(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     return (1 << x) + 1;
  }

  /*
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31
   */
  int pow2plus4(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     int result = (1 << x);
     result += 4;
     return result;
  }

FLOATING POINT CODING RULES

For the problems that require you to implent floating-point operations,
the coding rules are less strict.  You are allowed to use looping and
conditional control.  You are allowed to use both ints and unsigneds.
You can use arbitrary integer and unsigned constants.

You are expressly forbidden to:
  1. Define or use any macros.
  2. Define any additional functions in this file.
  3. Call any functions.
  4. Use any form of casting.
  5. Use any data type other than int or unsigned.  This means that you
     cannot use arrays, structs, or unions.
  6. Use any floating point data types, operations, or constants.


NOTES:
  1. Use the dlc (data lab checker) compiler (described in the handout) to 
     check the legality of your solutions.
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)
     that you are allowed to use for your implementation of the function. 
     The max operator count is checked by dlc. Note that '=' is not 
     counted; you may use as many of these as you want without penalty.
  3. Use the btest test harness to check your functions for correctness.
  4. Use the BDD checker to formally verify your functions
  5. The maximum number of ops for each function is given in the
     header comment for each function. If there are any inconsistencies 
     between the maximum ops in the writeup and in this file, consider
     this file the authoritative source.

/*
 * STEP 2: Modify the following functions according the coding rules.
 * 
 *   IMPORTANT. TO AVOID GRADING SURPRISES:
 *   1. Use the dlc compiler to check that your solutions conform
 *      to the coding rules.
 *   2. Use the BDD checker to formally verify that your solutions produce 
 *      the correct answers.
 */


#endif
/* 
 * bitXor - x^y using only ~ and & 
 *   Example: bitXor(4, 5) = 1
 *   Legal ops: ~ &
 *   Max ops: 14
 *   Rating: 1
 */
int bitXor(int x, int y) {
  return (~(~x&~y))&(~(x&y));
}
/*
 * isTmax - returns 1 if x is the maximum, two's complement number,
 *     and 0 otherwise 
 *   Legal ops: ! ~ & ^ | +
 *   Max ops: 10
 *   Rating: 1
 */
int isTmax(int x) {
   int condition1=!((x+1)^(~x));    //test if x+1 equals ~x (0xefffffff+1 will cause overflow)
   int condition2=!!(~x);           //test x not equals to 0xffffffff
  return  condition1 & condition2;

}
/* 
 * isLessOrEqual - if x <= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isLessOrEqual(int x, int y) {
	int negx=~x+1;                                    //get -x
	int sum=y+negx;
        int one=1;
        int signx=!!(x>>31);
        int signy=!!(y>>31);
        int condition1=(!(sum>>31)) & !(signx^signy);     //when x and y have same sign, determine the sign of y+(-x)     
        int condition2= !(signx^one) & !(signy^0);        //when x is negative and y is positive, x<=y always true
  return condition1 | condition2;
}
/* 
 * rempwr2 - Compute x%(2^n), for 0 <= n <= 30
 *   Negative arguments should yield negative remainders
 *   Examples: rempwr2(15,2) = 3, rempwr2(-35,3) = -3
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3
 */
int rempwr2(int x, int n) {
    int one=1;
    int sign=x>>31;
    int output=x^sign;
    int remainder;
    output=output+((!!sign)&one);
    remainder= output&((one<<n)+(~one+1));      //x%(2^n)==x&(2^n-1)
    return (sign^remainder)+((!!sign)&one);     //when x is negative, yield to negative values
}
/* 
 * subOK - Determine if can compute x-y without overflow
 *   Example: subOK(0x80000000,0x80000000) = 1,
 *            subOK(0x80000000,0x70000000) = 0, 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3
 */
int subOK(int x, int y) {
  int negy=~y+1;
  int sub1 = x + negy;
  int tmpx = x >> 31;
  int tmpy = y >> 31;
  int sub2 = sub1 >> 31;
  return !((tmpx ^ tmpy) & (tmpx ^ sub2));   // return 1 when x and y, x and subtraction have different signs
}
/* 
 * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')
 *   Example: isAsciiDigit(0x35) = 1.
 *            isAsciiDigit(0x3a) = 0.
 *            isAsciiDigit(0x05) = 0.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 3
 */
int isAsciiDigit(int x) {
  /*! First determine whether the first 26 bits are all 0
   *  Then determine whether this number add 6 causes the 7th
   *  bit change to 1
   *   
   */
  return (!(x>>6))& !((x+0x6)>>6) & !((x>>4)^3);
}
/* 
 * reverseBytes - reverse the bytes of x
 *   Example: reverseBytes(0x01020304) = 0x04030201
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 25
 *   Rating: 3
 */
int reverseBytes(int x) {
  int one=1;
  int mask=~((one<<31)>>7);      //create mask for logical shift
  int mask2=~((one<<31)>>15);
  int x1=x<<24;                  //Get the least significant 2 bytes
  int tmp1=(x>>8)&mask;
  int x2=((tmp1<<24)>>8)&mask;   //Get the 3rd and 4th bytes
  int tmp2=(tmp1>>8)&mask;
  int x3=((tmp2<<24)>>16)&mask2; //Get the 5th and 6th bytes
  int x4=(tmp2>>8)&mask;         //Get the most significant 2 bytes
  return x1+x2+x3+x4;
}
/*
 * ezThreeFourths - multiplies by 3/4 rounding toward 0,
 *   Should exactly duplicate effect of C expression (x*3/4),
 *   including overflow behavior.
 *   Examples: ezThreeFourths(11) = 8
 *             ezThreeFourths(-9) = -6
 *             ezThreeFourths(1073741824) = -268435456 (overflow)
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 3
 */
int ezThreeFourths(int x) {
    int add=x+x+x;                            //x*(3/4)=(3*x)/4=(x+x+x)>>2
    int index=(!!(add<<30))&(!!(add>>31));    //
  return (add>>2)+(index&1);
}
/*
 * trueThreeFourths - multiplies by 3/4 rounding toward 0,
 *   avoiding errors due to overflow
 *   Examples: trueThreeFourths(11) = 8
 *             trueThreeFourths(-9) = -6
 *             trueThreeFourths(1073741824) = 805306368 (no overflow)
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 4
 */
int trueThreeFourths(int x)
{ 
  int one=1;
  int index=(((!!(x<<30))&(!(x>>31)))<<31)>>31;
  return x+(~(x>>2))+1+((~one+1)&index);
}
/*
 * bitParity - returns 1 if x contains an odd number of 0's
 *   Examples: bitParity(5) = 0, bitParity(7) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 4
 */
int bitParity(int x) {
	x=~x;
	x=x^(x>>1);
	x=x^(x>>2);
	x=x^(x>>4);
	x=x^(x>>8);
	x=x^(x>>16);
  return !!((x<<31)>>31);
}
/* 
 * tc2sm - Convert from two's complement to sign-magnitude 
 *   where the MSB is the sign bit
 *   You can assume that x > TMin
 *   Example: tc2sm(-5) = 0x80000005.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 4
 */
int tc2sm(int x) {
	int sign=!!(x>>31);
  return sign<<31|((x>>31^x)+sign);
}
/*
 * isPower2 - returns 1 if x is a power of 2, and 0 otherwise
 *   Examples: isPower2(5) = 0, isPower2(8) = 1, isPower2(0) = 0
 *   Note that no negative number is a power of 2.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 4
 */
int isPower2(int x) {
        //set all bits right to the most significant bit with 1 to 1
	int tmp1=x>>1;
	tmp1=tmp1|(tmp1>>1);
	tmp1=tmp1|(tmp1>>2);
	tmp1=tmp1|(tmp1>>4);
	tmp1=tmp1|(tmp1>>8);
	tmp1=tmp1|(tmp1>>16);
        return  !(x>>31) & !((tmp1+1)^x) & !!x;      //x>0 and the modified value+1 equal to x
}
/* 
 * float_neg - Return bit-level equivalent of expression -f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representations of
 *   single-precision floating point values.
 *   When argument is NaN, return argument.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 10
 *   Rating: 2
 */
unsigned float_neg(unsigned uf) {
        unsigned one=1;
	if(!(((~uf)<<1)>>24) && uf<<9)
		return uf;   // if uf is NaN, return the number
	return (one<<31)^uf; //return negative
}
/* 
 * float_i2f - Return bit-level equivalent of expression (float) x
 *   Result is returned as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point values.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_i2f(int x) {
  int index,truncate,threshold,sign,mask,e,result,originx;
  originx=x;
  if(x==0)
      return x;
  threshold=0;
  truncate=0;
  sign=0x80000000&x;       //get the sign of the number
  mask=0x7FFFFF;
  e=0;
  if(sign)
     x=~x+1;               //change to positive value if x<0
  if(x==(0x80000000))
  {
     /*! When x=-0, set e=0 and x=0
      *  and so will return 0x80000000
      */
     e=0;                  
     x=0;
  }else
  {  
         originx=x;
         while(!(x & (0x80000000)))
             {
                /*! Loop ends until the most significant 1 move to left */
                x = x << 1;  
                e++;
             }
   }
     x = x << 1;           // clear the most significant 1
     x = (x >> 9)&mask;    // keep it in 
     index=31-e;
     e = (158 - e) << 23;
     if(index>23)
    {
         threshold=1<<(index-24);
         truncate=originx&((threshold<<1)-1);
    }
   result=((sign | e) | x);
     if(truncate>threshold)
     {
      result=result+1;
     }
     if(truncate && truncate==threshold)
     {
       result=result+(1&x); 
     }
  return result;
}
