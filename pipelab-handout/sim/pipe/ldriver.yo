                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f494030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f594030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f054020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f04c010000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | # Name: Xiaohui Chen
                      | # UT eid: xc2388
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | # I unroll the loop for copying arrays. By doing so I can
                      | # reduce the number of conditional jumps which will cause
                      | # additional cycles for adjusting mispredictions. I set a
                      | # threshold value which equals count-increment+1. Here I set
                      | # the increment to 6 due to numerous trials. In the first 
                      | # loop 6 elements are copied in one cycle when the total 
                      | # numbers copied less than the threshold value. The remaining
                      | # elements will be copied in the second loop with increment 1.
                      | # Also, I make use of iaddl instruction to simplify the code.
                      | # In the first loop, I use address mode instead of adding 4 to
                      | # both source pointer and destination pointer. In this way I 
                      | # can reduce up to 10 insturctions for each cycle of the loop.
                      | 
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
  0x046: 6300         |        xorl %eax,%eax
  0x048: 2027         |        rrmovl %edx, %edi
  0x04a: c0f7fbffffff |        iaddl $-5, %edi
  0x050: a07f         |        pushl %edi
  0x052: 7104010000   |        jle Done2
                      |        
                      | 
  0x057: 506300000000 | Loop1:  mrmovl (%ebx), %esi	# read val from src...
  0x05d: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x063: 6266         | 	andl %esi, %esi		# val <= 0?
  0x065: 7170000000   | 	jle Npos1		# if so, goto Npos:
  0x06a: c0f001000000 | 	iaddl $1, %eax		# count++
  0x070:              | Npos1:	
                      | 
  0x070: 506304000000 |         mrmovl 4(%ebx), %esi	# read val from src...
  0x076: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x07c: 6266         | 	andl %esi, %esi		# val <= 0?
  0x07e: 7189000000   | 	jle Npos2		# if so, goto Npos:
  0x083: c0f001000000 | 	iaddl $1, %eax		# count++
  0x089:              | Npos2:	
  0x089: 506308000000 |         mrmovl 8(%ebx), %esi	# read val from src...
  0x08f: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x095: 6266         | 	andl %esi, %esi		# val <= 0?
  0x097: 71a2000000   | 	jle Npos3		# if so, goto Npos:
  0x09c: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0a2:              | Npos3:	
                      | 
  0x0a2: 50630c000000 |         mrmovl 12(%ebx), %esi	# read val from src...
  0x0a8: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x0ae: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0b0: 71bb000000   | 	jle Npos4		# if so, goto Npos:
  0x0b5: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0bb:              | Npos4:	
                      | 
  0x0bb: 506310000000 |         mrmovl 16(%ebx), %esi	# read val from src...
  0x0c1: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x0c7: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0c9: 71d4000000   | 	jle Npos5		# if so, goto Npos:
  0x0ce: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0d4:              | Npos5:	
                      | 
  0x0d4: 506314000000 |         mrmovl 20(%ebx), %esi	# read val from src...
  0x0da: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x0e0: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0e2: 71ed000000   | 	jle Npos6		# if so, goto Npos:
  0x0e7: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0ed: c0f318000000 | Npos6:	iaddl $24, %ebx		# src++
  0x0f3: c0f118000000 | 	iaddl $24, %ecx		# dst++
                      |         
  0x0f9: c0f7faffffff |         iaddl $-6, %edi
  0x0ff: 7657000000   |         jg Loop1
                      | 
                      | 
  0x104: b06f         | Done2:  popl %esi
  0x106: 6162         |         subl %esi, %edx
  0x108: 6072         |         addl %edi, %edx
  0x10a: 713f010000   | 	jle Done		# if so, goto Done:
                      | 
  0x10f: 506300000000 | Loop:	mrmovl (%ebx), %esi	# read val from src...
  0x115: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x11b: 6266         | 	andl %esi, %esi		# val <= 0?
  0x11d: 7128010000   | 	jle Npos		# if so, goto Npos:
  0x122: c0f001000000 | 	iaddl $1, %eax		# count++
  0x128: c0f304000000 | Npos:	iaddl $4, %ebx		# src++
  0x12e: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x134: c0f2ffffffff |         iaddl $-1, %edx	
  0x13a: 760f010000   | 	jg Loop			# if so, goto Loop:
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x13f:              | Done:
  0x13f: b07f         | 	popl %edi               # Restore callee-save registers
  0x141: b03f         | 	popl %ebx
  0x143: b06f         | 	popl %esi
  0x145: 2054         | 	rrmovl %ebp, %esp
  0x147: b05f         | 	popl %ebp
  0x149: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x14a:              | End:
                      | #/* $end ncopy-ys */
  0x14a:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x14c:              | 	.align 4
  0x14c:              | src:
  0x14c: ffffffff     | 	.long -1
  0x150: 02000000     | 	.long 2
  0x154: 03000000     | 	.long 3
  0x158: fcffffff     | 	.long -4
  0x15c: 05000000     | 	.long 5
  0x160: 06000000     | 	.long 6
  0x164: f9ffffff     | 	.long -7
  0x168: f8ffffff     | 	.long -8
  0x16c: 09000000     | 	.long 9
  0x170: f6ffffff     | 	.long -10
  0x174: f5ffffff     | 	.long -11
  0x178: f4ffffff     | 	.long -12
  0x17c: f3ffffff     | 	.long -13
  0x180: 0e000000     | 	.long 14
  0x184: f1ffffff     | 	.long -15
  0x188: f0ffffff     | 	.long -16
  0x18c: efffffff     | 	.long -17
  0x190: eeffffff     | 	.long -18
  0x194: 13000000     | 	.long 19
  0x198: ecffffff     | 	.long -20
  0x19c: ebffffff     | 	.long -21
  0x1a0: eaffffff     | 	.long -22
  0x1a4: 17000000     | 	.long 23
  0x1a8: 18000000     | 	.long 24
  0x1ac: e7ffffff     | 	.long -25
  0x1b0: e6ffffff     | 	.long -26
  0x1b4: e5ffffff     | 	.long -27
  0x1b8: 1c000000     | 	.long 28
  0x1bc: e3ffffff     | 	.long -29
  0x1c0: 1e000000     | 	.long 30
  0x1c4: 1f000000     | 	.long 31
  0x1c8: e0ffffff     | 	.long -32
  0x1cc: 21000000     | 	.long 33
  0x1d0: 22000000     | 	.long 34
  0x1d4: 23000000     | 	.long 35
  0x1d8: dcffffff     | 	.long -36
  0x1dc: dbffffff     | 	.long -37
  0x1e0: daffffff     | 	.long -38
  0x1e4: d9ffffff     | 	.long -39
  0x1e8: 28000000     | 	.long 40
  0x1ec: d7ffffff     | 	.long -41
  0x1f0: d6ffffff     | 	.long -42
  0x1f4: 2b000000     | 	.long 43
  0x1f8: d4ffffff     | 	.long -44
  0x1fc: d3ffffff     | 	.long -45
  0x200: d2ffffff     | 	.long -46
  0x204: d1ffffff     | 	.long -47
  0x208: d0ffffff     | 	.long -48
  0x20c: 31000000     | 	.long 49
  0x210: 32000000     | 	.long 50
  0x214: 33000000     | 	.long 51
  0x218: ccffffff     | 	.long -52
  0x21c: 35000000     | 	.long 53
  0x220: 36000000     | 	.long 54
  0x224: 37000000     | 	.long 55
  0x228: 38000000     | 	.long 56
  0x22c: 39000000     | 	.long 57
  0x230: 3a000000     | 	.long 58
  0x234: 3b000000     | 	.long 59
  0x238: 3c000000     | 	.long 60
  0x23c: 3d000000     | 	.long 61
  0x240: 3e000000     | 	.long 62
  0x244: 3f000000     | 	.long 63
  0x248: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x250:              | 	.align 16
  0x250:              | Predest:
  0x250: fadebc00     | 	.long 0xbcdefa
  0x254:              | dest:
  0x254: abefcd00     | 	.long 0xcdefab
  0x258: abefcd00     | 	.long 0xcdefab
  0x25c: abefcd00     | 	.long 0xcdefab
  0x260: abefcd00     | 	.long 0xcdefab
  0x264: abefcd00     | 	.long 0xcdefab
  0x268: abefcd00     | 	.long 0xcdefab
  0x26c: abefcd00     | 	.long 0xcdefab
  0x270: abefcd00     | 	.long 0xcdefab
  0x274: abefcd00     | 	.long 0xcdefab
  0x278: abefcd00     | 	.long 0xcdefab
  0x27c: abefcd00     | 	.long 0xcdefab
  0x280: abefcd00     | 	.long 0xcdefab
  0x284: abefcd00     | 	.long 0xcdefab
  0x288: abefcd00     | 	.long 0xcdefab
  0x28c: abefcd00     | 	.long 0xcdefab
  0x290: abefcd00     | 	.long 0xcdefab
  0x294: abefcd00     | 	.long 0xcdefab
  0x298: abefcd00     | 	.long 0xcdefab
  0x29c: abefcd00     | 	.long 0xcdefab
  0x2a0: abefcd00     | 	.long 0xcdefab
  0x2a4: abefcd00     | 	.long 0xcdefab
  0x2a8: abefcd00     | 	.long 0xcdefab
  0x2ac: abefcd00     | 	.long 0xcdefab
  0x2b0: abefcd00     | 	.long 0xcdefab
  0x2b4: abefcd00     | 	.long 0xcdefab
  0x2b8: abefcd00     | 	.long 0xcdefab
  0x2bc: abefcd00     | 	.long 0xcdefab
  0x2c0: abefcd00     | 	.long 0xcdefab
  0x2c4: abefcd00     | 	.long 0xcdefab
  0x2c8: abefcd00     | 	.long 0xcdefab
  0x2cc: abefcd00     | 	.long 0xcdefab
  0x2d0: abefcd00     | 	.long 0xcdefab
  0x2d4: abefcd00     | 	.long 0xcdefab
  0x2d8: abefcd00     | 	.long 0xcdefab
  0x2dc: abefcd00     | 	.long 0xcdefab
  0x2e0: abefcd00     | 	.long 0xcdefab
  0x2e4: abefcd00     | 	.long 0xcdefab
  0x2e8: abefcd00     | 	.long 0xcdefab
  0x2ec: abefcd00     | 	.long 0xcdefab
  0x2f0: abefcd00     | 	.long 0xcdefab
  0x2f4: abefcd00     | 	.long 0xcdefab
  0x2f8: abefcd00     | 	.long 0xcdefab
  0x2fc: abefcd00     | 	.long 0xcdefab
  0x300: abefcd00     | 	.long 0xcdefab
  0x304: abefcd00     | 	.long 0xcdefab
  0x308: abefcd00     | 	.long 0xcdefab
  0x30c: abefcd00     | 	.long 0xcdefab
  0x310: abefcd00     | 	.long 0xcdefab
  0x314: abefcd00     | 	.long 0xcdefab
  0x318: abefcd00     | 	.long 0xcdefab
  0x31c: abefcd00     | 	.long 0xcdefab
  0x320: abefcd00     | 	.long 0xcdefab
  0x324: abefcd00     | 	.long 0xcdefab
  0x328: abefcd00     | 	.long 0xcdefab
  0x32c: abefcd00     | 	.long 0xcdefab
  0x330: abefcd00     | 	.long 0xcdefab
  0x334: abefcd00     | 	.long 0xcdefab
  0x338: abefcd00     | 	.long 0xcdefab
  0x33c: abefcd00     | 	.long 0xcdefab
  0x340: abefcd00     | 	.long 0xcdefab
  0x344: abefcd00     | 	.long 0xcdefab
  0x348: abefcd00     | 	.long 0xcdefab
  0x34c: abefcd00     | 	.long 0xcdefab
  0x350:              | Postdest:
  0x350: bcfade00     | 	.long 0xdefabc
                      | 
  0x354:              | .align 4
                      | # Run time stack
  0x354: 00000000     | 	.long 0
  0x358: 00000000     | 	.long 0
  0x35c: 00000000     | 	.long 0
  0x360: 00000000     | 	.long 0
  0x364: 00000000     | 	.long 0
  0x368: 00000000     | 	.long 0
  0x36c: 00000000     | 	.long 0
  0x370: 00000000     | 	.long 0
  0x374: 00000000     | 	.long 0
  0x378: 00000000     | 	.long 0
  0x37c: 00000000     | 	.long 0
  0x380: 00000000     | 	.long 0
  0x384: 00000000     | 	.long 0
  0x388: 00000000     | 	.long 0
  0x38c: 00000000     | 	.long 0
  0x390: 00000000     | 	.long 0
                      | 
  0x394:              | Stack:
